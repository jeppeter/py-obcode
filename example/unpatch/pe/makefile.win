CURDIR=$(MAKEDIR)
TOPDIR=$(CURDIR)\..\..\..

CC      = cl.exe
LD      = link.exe
AR      = lib.exe
RM      = del
PYTHON  = python.exe
CP      = copy /Y



!IFDEF MAKEVERBOSE
!IF $(MAKEVERBOSE) != 0
QUIETCMD=
NOLOGO_CFLAGS=
NOLOGO_LDFLAGS=
NOLOGO_MAKEFLAGS=
GIT_VERBOSE=
PYTHON_VERBOSE= -vvvv
!ELSE
QUIETCMD=@
NOLOGO_CFLAGS=/nologo
NOLOGO_LDFLAGS=/nologo
NOLOGO_MAKEFLAGS=/NOLOGO
GIT_VERBOSE=--quiet
PYTHON_VERBOSE=
!ENDIF
!ELSE
QUIETCMD=@
NOLOGO_CFLAGS=/nologo
NOLOGO_LDFLAGS=/nologo
NOLOGO_MAKEFLAGS=/NOLOGO
GIT_VERBOSE=--quiet
PYTHON_VERBOSE=
!ENDIF

!IFDEF STATICLIB
!IF $(STATICLIB) != 0
STATIC_LIB_CFLAGS=/MT

INC_LDFLAGS=

!ELSE
STATIC_LIB_CFLAGS=/MT
INC_LDFLAGS =

!ENDIF
!ELSE
STATIC_LIB_CFLAGS=/MT

INC_LDFLAGS=
!ENDIF

INC_CFLAGS = /I"$(TOPDIR)\include"
COM_CFLAGS = /Wall /wd"4820" /wd"4668" /wd"4127" /wd"4510" /wd"4512" /wd"4610" /wd"4710" /wd"5045" 
REL_CFLAGS = /DOB_MMAP=1
DBG_CFLAGS = /Z7 /Od  
#DBG_CFLAGS = /Zi /Od  


REL_LDFLAGS = 

CFLAGS  =  $(NOLOGO_CFLAGS) $(STATIC_LIB_CFLAGS) $(INC_CFLAGS) $(COM_CFLAGS) $(REL_CFLAGS) $(DBG_CFLAGS)
LDFLAGS = $(NOLOGO_LDFLAGS) $(INC_LDFLAGS) $(REL_LDFLAGS) -DEBUG
#LDFLAGS = $(NOLOGO_LDFLAGS) $(INC_LDFLAGS) $(REL_LDFLAGS)

main_SOURCES=main.cpp callc.cpp main_unpatch.cpp
main_OBJECTS=$(main_SOURCES:.cpp=.obj)

main2_SOURCES=main2.cpp callc.cpp main2_unpatch.cpp
main2_OBJECTS=$(main2_SOURCES:.cpp=.obj)

getfunc_SOURCES=getfunc.cpp
getfunc_OBJECTS=$(getfunc_SOURCES:.cpp=.obj)

!IF "$(PLATFORM)" == "X86"
main_CLAUSE = "$(CURDIR)\main.obj;print_out_a,print_out_b,print_out_c" "$(CURDIR)\callc.obj;call_a,call_b,call_c" "win32;"
main2_CLAUSE = "$(CURDIR)\main2.obj;ccprint_out_a,ccprint_out_b,ccprint_out_c" "$(CURDIR)\callc.obj;call_a,call_b,call_c" "win32;"
!ELSE
main_CLAUSE = "$(CURDIR)\main.obj;print_out_a,print_out_b,print_out_c" "$(CURDIR)\callc.obj;call_a,call_b,call_c"
main2_CLAUSE = "$(CURDIR)\main2.obj;ccprint_out_a,ccprint_out_b,ccprint_out_c" "$(CURDIR)\callc.obj;call_a,call_b,call_c"
!ENDIF

all:main.exe main2.exe getfunc.exe

!IFDEF OB_REPATCH

main.exe:$(main_OBJECTS)
	$(QUIETCMD) echo "call static $(main_OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(main_OBJECTS)
	$(QUIETCMD)echo "use static lib"
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) -o $(CURDIR)\main.exe obrepatchpe -D $(OB_REPATCH)  $(CURDIR)\main.obj $(CURDIR)\callc.obj $(CURDIR)\main_unpatch.obj

main2.exe:$(main2_OBJECTS)
	$(QUIETCMD) echo "call static $(main_OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(main2_OBJECTS)
	$(QUIETCMD)echo "use static lib"
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) -o $(CURDIR)\main2.exe obrepatchpe -D $(OB_REPATCH)  $(CURDIR)\main2.obj $(CURDIR)\callc.obj $(CURDIR)\main2_unpatch.obj

!ELSE

!IFDEF OB_PATCH
main.exe:$(main_OBJECTS) unpatch.json
	$(QUIETCMD) echo "call static $(main_OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(main_OBJECTS)
	$(QUIETCMD)echo "use static lib"
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) -o $(CURDIR)\main.exe obpatchpe -D $(CURDIR)\unpatch.json  $(CURDIR)\main.obj $(CURDIR)\callc.obj $(CURDIR)\main_unpatch.obj

main2.exe:$(main2_OBJECTS) unpatch.json
	$(QUIETCMD) echo "call static $(main_OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(main2_OBJECTS)
	$(QUIETCMD)echo "use static lib"
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) -o $(CURDIR)\main2.exe obpatchpe -D $(CURDIR)\unpatch.json  $(CURDIR)\main2.obj $(CURDIR)\callc.obj $(CURDIR)\main2_unpatch.obj


!ELSE
main.exe:$(main_OBJECTS) unpatch.json
	$(QUIETCMD) echo "call static $(main_OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(main_OBJECTS)
	$(QUIETCMD)echo "use static lib"

main2.exe:$(main2_OBJECTS) unpatch.json
	$(QUIETCMD) echo "call static $(main_OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(main2_OBJECTS)
	$(QUIETCMD)echo "use static lib"
# ENDIF OB_PATCH
!ENDIF  

# ENDIF OB_REPATCH
!ENDIF

getfunc.exe:$(getfunc_OBJECTS)
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(getfunc_OBJECTS)


.cpp.obj:
	$(QUIETCMD)$(CC) $(CFLAGS) -c -Fo$@ $<

unpatch.json:main_unpatch.cpp main2_unpatch.cpp

#	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py --includefiles main.h -D unpatch.json -o unpatch.cpp obunpatchcoff "$(CURDIR)\main.obj;print_out_a,print_out_b,print_out_c" "$(CURDIR)\callc.obj;call_a,call_b,call_c" -vvvv

!IFDEF OB_REPATCH

main_unpatch.cpp:main.obj callc.obj
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) --includefiles main.h --includefiles unpatch.h --includefiles callc.h -D $(OB_REPATCH) -o main_unpatch.cpp obreunpatchcoff $(main_CLAUSE)

main2_unpatch.cpp:main2.obj callc.obj
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) --includefiles main2.h --includefiles unpatch.h --includefiles callc.h -D $(OB_REPATCH) -o main2_unpatch.cpp obreunpatchcoff $(main2_CLAUSE)


!ELSE

!IFDEF OB_PATCH
main_unpatch.cpp:main.obj callc.obj
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) --includefiles main.h --includefiles unpatch.h --includefiles callc.h -D unpatch.json -o main_unpatch.cpp obunpatchcoff $(main_CLAUSE)

main2_unpatch.cpp:main2.obj callc.obj
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py $(PYTHON_VERBOSE) --includefiles main2.h --includefiles unpatch.h --includefiles callc.h -D unpatch.json -o main2_unpatch.cpp obunpatchcoff $(main2_CLAUSE)

!ELSE
main_unpatch.cpp:main.obj callc.obj
	$(QUIETCMD)echo {} >unpatch.json
	$(QUIETCMD)echo #include "unpatch.h" >main_unpatch.cpp
	$(QUIETCMD)echo int unpatch_handler(map_prot_func_t protfunc) { protfunc = protfunc;return 0;} >>main_unpatch.cpp

main2_unpatch.cpp:main2.obj callc.obj
	$(QUIETCMD)echo {} >unpatch.json
	$(QUIETCMD)echo #include "unpatch.h" >main2_unpatch.cpp
	$(QUIETCMD)echo int unpatch_handler(map_prot_func_t protfunc) { protfunc = protfunc;return 0;} >>main2_unpatch.cpp

# endif OB_PATCH
!ENDIF

# endif OB_REPATCH
!ENDIF


clean:
	$(QUIETCMD) $(RM) *.exe *.obj *.ilk *.pdb 2>NUL
	$(QUIETCMD) $(RM) main_unpatch.cpp main2_unpatch.cpp unpatch.json 2>NUL
