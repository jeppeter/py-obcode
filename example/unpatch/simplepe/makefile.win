CURDIR=$(MAKEDIR)
TOPDIR=$(CURDIR)\..\..\..

CC      = cl.exe
LD      = link.exe
AR      = lib.exe
RM      = del
PYTHON  = python.exe
CP      = copy /Y



QUIETCMD=@
NOLOGO_CFLAGS=/nologo
NOLOGO_LDFLAGS=/nologo
NOLOGO_MAKEFLAGS=/NOLOGO
GIT_VERBOSE=--quiet

STATIC_LIB_CFLAGS=/MT
INC_LDFLAGS=


INC_CFLAGS = /I"$(TOPDIR)\include"
COM_CFLAGS = /DOB_MMAP=1 /Wall /wd"4820" /wd"4668" /wd"4127" /wd"4510" /wd"4512" /wd"4610" /wd"4710" /wd"5045"
REL_CFLAGS = 
DBG_CFLAGS = /Z7 /Od 


REL_LDFLAGS = 

CFLAGS  =  $(NOLOGO_CFLAGS) $(STATIC_LIB_CFLAGS) $(INC_CFLAGS) $(COM_CFLAGS) $(REL_CFLAGS) $(DBG_CFLAGS)
LDFLAGS = $(NOLOGO_LDFLAGS) $(INC_LDFLAGS) $(REL_LDFLAGS)

SOURCES=main.cpp unpatch.cpp
OBJECTS=$(SOURCES:.cpp=.obj)

!IF "$(PLATFORM)" == "X86"
main_CLAUSE= "$(CURDIR)\main.obj;print_out_a" "win32;"
!ELSE
main_CLAUSE= "$(CURDIR)\main.obj;print_out_a"
!ENDIF

!IFDEF OB_REPATCH
JSON_FILE=$(OB_REPATCH)
PATCH_EXE=obrepatchpe
UNPATCH_COFF=obreunpatchcoff
!ELSE
JSON_FILE=$(CURDIR)\unpatch.json

!IFDEF OB_PATCH
PATCH_EXE=obpatchpe
UNPATCH_COFF=obunpatchcoff
!ELSE
PATCH_EXE=obpatchpeforge
UNPATCH_COFF=obunpatchcoffforge
!ENDIF

!ENDIF

all:main.exe

main.exe:$(OBJECTS)
	$(QUIETCMD) echo "call static $(OBJECTS)"
	$(QUIETCMD)$(LD) -out:$@  $(LDFLAGS)  $(OBJECTS)
	$(QUIETCMD)echo "use static lib"
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py -o $(CURDIR)\main.exe $(PATCH_EXE) -D $(JSON_FILE)  $(CURDIR)\main.obj $(CURDIR)\unpatch.obj

unpatch.json:main.obj
	$(QUIETCMD)$(PYTHON) $(TOPDIR)\obcode.py --includefiles main.h -D $(JSON_FILE) -o unpatch.cpp $(UNPATCH_COFF)  $(main_CLAUSE)


.cpp.obj:
	$(QUIETCMD)$(CC) $(CFLAGS) -c -Fo$@ $<

unpatch.cpp:unpatch.json




clean:
	$(QUIETCMD) $(RM) *.exe *.obj *.pdb 2>NUL
	$(QUIETCMD) $(RM) unpatch.cpp unpatch.json 2>NUL
